import numpy as _np
import pandas as _pd
import cylowess as _cl
import scipy.fftpack as _fft


def reject_outliers(data, deviation_tolerance=3):

    """
    Replaces outliers in a numpy array with NaN.

    Checks for outliers by comparing the distance of each element in the
    input array from the median value of the input array. The median is
    used to be robust to large outliers.

    Accepts numpy array, returns numpy array of the same length.

    Parameters
    ----------
    deviation_tolerance : value, default 3
        deviation_tolerance sets the threshold for whether an element from
        the input vector is removed by the outlier rejection.
    """

    data = data.astype('float')
    distance = _np.abs(data - _np.median(data))
    data[distance > deviation_tolerance*_np.median(distance)] = _np.nan
    return data


def robust_mean(data, stdcutoff=None, deviation_tolerance=3):

    """
    Robustified mean. Rejects outliers before taking mean.

    Significant speedup when utilizing the "stdcutoff" argument.

    Accepts numpy array, returns value.

    Parameters
    ----------
    stdcutoff : value, default None
        stdcutoff is compared to the std. dev. of input data. Explicit
        outlier rejection only occurs if this test fails. 10x+ speedup.
    deviation_tolerance : value, default 3
        deviation_tolerance sets the threshold for whether an element from
        the input vector is removed by the outlier rejection.
    """

    if stdcutoff is None:
        return _np.mean(reject_outliers(data,
                        deviation_tolerance=deviation_tolerance))
    else:
        if _np.std(data) < stdcutoff:
            return _np.mean(data)
        else:
            return _np.mean(reject_outliers(data,
                            deviation_tolerance=deviation_tolerance))


def polysmooth(series, order=5):

    """
    Fits a polynomial to a pandas Series.

    Outputs the fitted polynomial evaluated at the index values where the
    input series value is finite. NaN everywhere else.

    Accepts (single index) pandas Series, returns a numpy array of the same
    length.

    Parameters
    ----------
    order : integer, default 5
        Order of polynomial fitting.
    """

    output = _np.empty(len(series))
    output[:] = _np.nan
    nanmask = _np.isfinite(series).values
    x_data = series.dropna().index.values.astype(float)
    y_data = series.dropna().values.astype(float)
    fit_polynomial = _np.polyfit(x_data, y_data, order)
    output[nanmask] = _np.polyval(fit_polynomial, x_data)
    return output


def lowess(series, frac=.5, delta=None, it=None):

    """
    Smooths a pandas Series using local linear regression (lowess).

    grumpy.lowess implements the fast 'cylowess' implementation built by
    C. Vogel. The original code can be found here:
    https://github.com/carljv/Will_it_Python/

    Outputs the fitted polynomial evaluated at the index values where the
    input series value is finite. NaN everywhere else.

    Accepts (single index) pandas Series, returns a numpy array of the same
    length.

    Parameters
    ----------
    frac: float, default .5
            Between 0 and 1. The fraction of the data used
            when estimating each y-value.
        it: int, default 3
            The number of residual-based reweightings
            to perform.
        delta: float, default 1 percent of range(x_data)
            Distance within which to use linear-interpolation
            instead of weighted regression.
    """

    output = _np.empty(len(series))
    output[:] = _np.nan
    nanmask = _np.isfinite(series).values
    x_data = series.dropna().index.values.astype(float)
    y_data = series.dropna().values.astype(float)

    if it is None:
        it = 3
    if delta is None:
        delta = .01 * (max(x_data) - min(x_data))

    smooth = _cl.lowess(y_data, x_data, frac=frac, it=it, delta=delta)
    output[nanmask] = smooth[:, 1]
    return output


def absfft(series):

    """
    Calculates the (single-sided) FFT magnitude of a pandas Series.

    Internally absfft calls scipy's 'fft' function and 'fftfreq' helper
    function. absfft returns The fft magnitude of the input series indexed
    by the transformed frequency scale generated by 'fftfreq'. WARNING:
    absfft assumes that the spacing of the input series is uniform and
    passes the mean of the index spacing to 'fftfreq'. In the future I may
    improve this function by interpolating the input data.

    absfft returns only the positive frequency values. NaNs are returned for
    the negative frequency values. However, the negative frequency indexes
    are preserved and the length of the output matches the length of the
    input for consistency.

    Accepts (single index) pandas Series, returns a pandas Series of the same
    length.
    """

    fft_length = _np.ceil(len(series) / 2)

    x_data = series.dropna().index.values.astype(float)
    y_data = series.dropna().values.astype(float)

    fft_freq = _fft.fftfreq(len(series), d=_np.mean(_np.diff(x_data)))
    fft_mag = _fft.fft(y_data)

    fft_mag[-fft_length:] = _np.nan
    return _pd.Series(_np.sqrt(2) * _np.abs(fft_mag), index=fft_freq)
